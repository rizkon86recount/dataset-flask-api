[
  {
    "pertanyaan": "Apa itu JavaScript dalam pengembangan web?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Jelaskan pengertian JavaScript!",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Untuk apa JavaScript digunakan?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Apa fungsi utama dari JavaScript?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Kenapa JavaScript penting dalam web development?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Apa peran JavaScript di dalam website?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Apa kegunaan JavaScript di browser?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Bagaimana JavaScript bekerja di sebuah website?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Sebutkan definisi JavaScript!",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Apa perbedaan JavaScript dengan HTML?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "JavaScript itu termasuk bahasa pemrograman apa?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "JavaScript digunakan untuk apa saja di halaman web?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan JavaScript?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Bagaimana peran JavaScript dalam website modern?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Kenapa JavaScript sering digunakan oleh developer web?",
    "jawaban": "JavaScript adalah bahasa pemrograman yang berjalan di sisi klien (browser) dan digunakan untuk membuat halaman web menjadi interaktif.",
    "kode": null
  },
  {
    "pertanyaan": "Bagaimana cara menulis JavaScript secara internal di HTML?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Apa itu penulisan JavaScript internal?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Contoh penulisan JavaScript internal itu seperti apa?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Dimana menulis JavaScript secara internal di file HTML?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Bagaimana format menulis JavaScript langsung di HTML?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Bagaimana struktur JavaScript internal pada HTML?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Di bagian mana JavaScript internal ditulis dalam HTML?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Apa ciri penulisan JavaScript internal?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Bagaimana menyisipkan JavaScript langsung ke file HTML?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Dimana meletakkan kode JavaScript internal di HTML?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Tuliskan cara menulis JavaScript internal di HTML!",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Apa sintaks dasar JavaScript internal?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Bagaimana membuat alert menggunakan JavaScript internal?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan internal script dalam JavaScript?",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Tuliskan contoh JavaScript internal yang benar!",
    "jawaban": "Penulisan JavaScript secara internal dilakukan dengan menyisipkan kode JavaScript di dalam tag <script> di dalam file HTML.",
    "kode": "<script>\n  alert('Ini adalah JavaScript internal');\n</script>"
  },
  {
    "pertanyaan": "Bagaimana cara menulis JavaScript secara eksternal?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Apa itu penulisan JavaScript eksternal?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Bagaimana format JavaScript eksternal di HTML?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Tuliskan cara menggunakan JavaScript eksternal!",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Apa sintaks untuk memanggil file JavaScript eksternal?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Bagaimana menyambungkan file .js ke HTML?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Bagaimana menautkan JavaScript eksternal di HTML?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Apa fungsi tag script dengan atribut src?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Bagaimana menyisipkan file JavaScript dari luar ke HTML?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Apa cara pemanggilan file eksternal JavaScript?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Di mana menempatkan JavaScript eksternal dalam HTML?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Apa kelebihan menggunakan JavaScript eksternal?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Apa contoh penulisan JavaScript eksternal di HTML?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Bagaimana cara menghubungkan file JavaScript eksternal ke HTML?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Apa cara terbaik menambahkan JavaScript eksternal di HTML?",
    "jawaban": "Penulisan JavaScript secara eksternal dilakukan dengan memisahkan file JavaScript (.js) dan memanggilnya di HTML menggunakan tag <script src='...'>.",
    "kode": "<script src=\"script.js\"></script>"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan sintaks dasar dalam JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Apa saja elemen dasar dalam sintaks JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Sebutkan komponen sintaks dasar JavaScript!",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Apa saja yang termasuk dalam sintaks dasar JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Bagaimana struktur dasar dari JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Jelaskan sintaks dasar JavaScript!",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Apa dasar penulisan kode JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Elemen dasar apa yang digunakan dalam JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Apa sintaks awal yang harus dipahami dalam JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Bagaimana contoh sintaks dasar JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Apa hal pertama yang harus dipelajari dari sintaks JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Sebutkan dasar-dasar penulisan kode dalam JavaScript!",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Apa perintah dasar yang sering digunakan dalam JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Apa saja bagian penting dari sintaks dasar JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Apa struktur paling dasar dalam JavaScript?",
    "jawaban": "Sintaks dasar JavaScript mencakup variabel, operator, dan perintah seperti alert, prompt, dan fungsi.",
    "kode": "let nama = 'Rizkon';\nalert('Halo ' + nama);"
  },
  {
    "pertanyaan": "Bagaimana menulis komentar di JavaScript?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Apa sintaks komentar di JavaScript?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Tunjukkan cara membuat komentar di JavaScript!",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Apa tanda komentar satu baris di JavaScript?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Bagaimana format komentar di JavaScript?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Komentar dalam JavaScript ditulis dengan apa?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Apa cara menambahkan komentar pada kode JavaScript?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Contoh komentar dalam JavaScript seperti apa?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Apa bedanya komentar satu baris dan banyak baris di JavaScript?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Bagaimana cara memberi catatan pada kode JavaScript?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Apa fungsi komentar di JavaScript dan cara menulisnya?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Kapan menggunakan komentar di JavaScript dan bagaimana menulisnya?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Sebutkan dua jenis komentar dalam JavaScript!",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Apa simbol untuk membuat komentar di JavaScript?",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Tuliskan contoh komentar satu baris dan banyak baris di JavaScript!",
    "jawaban": "Komentar satu baris menggunakan `//`, sedangkan komentar banyak baris menggunakan `/* ... */`.",
    "kode": "// Ini komentar satu baris\n/* Ini komentar\n   banyak baris */"
  },
  {
    "pertanyaan": "Apa fungsi dari alert di JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Untuk apa fungsi alert digunakan dalam JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Apa kegunaan alert() di JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Apa tujuan penggunaan alert() dalam JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Bagaimana cara kerja alert() di JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Apa yang dilakukan oleh perintah alert di JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Jelaskan penggunaan alert di JavaScript!",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Apa output dari alert() dalam JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Bagaimana menampilkan notifikasi di browser dengan JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Apa itu alert() dalam JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Bagaimana membuat popup sederhana di JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan fungsi alert pada JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Apa fungsi alert untuk user interface di JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Alert digunakan untuk apa dalam JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Contoh penggunaan fungsi alert dalam JavaScript?",
    "jawaban": "Fungsi `alert()` digunakan untuk menampilkan kotak dialog pemberitahuan kepada pengguna.",
    "kode": "alert(\"halo!, saya sedang belajar js dasar\");"
  },
  {
    "pertanyaan": "Apa fungsi dari prompt di JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan prompt() dalam JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Apa kegunaan prompt di JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Jelaskan fungsi prompt dalam JavaScript!",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Untuk apa method prompt digunakan di JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Apa itu prompt dalam pemrograman JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Bagaimana prompt bekerja pada JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Apa hasil dari fungsi prompt di JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Apa perbedaan alert dan prompt dalam JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Bagaimana menampilkan kotak input dengan prompt di JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Berikan contoh penggunaan prompt dalam JavaScript!",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Bagaimana menanyakan nama pengguna dengan JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Metode apa yang digunakan untuk meminta input di JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Bagaimana cara menangkap input dari user di JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Apa manfaat dari fungsi prompt pada JavaScript?",
    "jawaban": "`prompt()` digunakan untuk meminta input dari pengguna melalui kotak dialog.",
    "kode": "let nama = prompt(\"Masukan nama anda:\");\nalert(\"Halo, \" + nama);"
  },
  {
    "pertanyaan": "Apa fungsi confirm dalam JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan confirm di JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Apa itu fungsi confirm dalam JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Untuk apa confirm digunakan dalam JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Jelaskan penggunaan fungsi confirm di JavaScript!",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Bagaimana confirm digunakan untuk meminta persetujuan pengguna?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Apa kegunaan confirm dalam browser?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Bagaimana sintaks confirm dalam JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Apa hasil dari fungsi confirm di JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Contoh penggunaan confirm di JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Bagaimana menampilkan dialog konfirmasi di JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Apa yang dilakukan confirm() pada JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara menangani hasil dari confirm di JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Apa perbedaan antara alert dan confirm di JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Kapan menggunakan confirm() dalam alur program JavaScript?",
    "jawaban": "`confirm()` digunakan untuk meminta konfirmasi dari pengguna (OK atau Cancel), biasanya dalam bentuk pertanyaan ya/tidak.",
    "kode": "let yakin = confirm(\"Apakah anda yakin ingin keluar?\");\nif (yakin) {\n  alert(\"Anda memilih keluar\");\n} else {\n  alert(\"Anda memilih tinggal disini\");\n}"
  },
  {
    "pertanyaan": "Bagaimana menampilkan output ke console di JavaScript?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Apa fungsi console.log() di JavaScript?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan console.log dalam JavaScript?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Untuk apa console.log() digunakan?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Apa tujuan penggunaan console.log di JavaScript?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Jelaskan penggunaan console.log di JavaScript!",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Bagaimana menampilkan log ke konsol di JavaScript?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Apa sintaks untuk mencetak ke console di JavaScript?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Bagaimana menampilkan pesan ke console?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Apa peran console.log dalam debugging JavaScript?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Contoh penggunaan console.log() di JavaScript?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Bagaimana melihat hasil output program JavaScript di console?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Apa manfaat console.log bagi developer JavaScript?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Kode apa yang digunakan untuk mencetak teks ke console?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Bagaimana men-debug JavaScript menggunakan console?",
    "jawaban": "Gunakan `console.log()` untuk menampilkan informasi ke jendela console, berguna untuk debugging.",
    "kode": "console.log(\"Ini output di console\");"
  },
  {
    "pertanyaan": "Apa fungsi dari document.writeln di JavaScript?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan document.writeln di JavaScript?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Apa kegunaan document.writeln dalam JavaScript?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Bagaimana mencetak teks ke halaman web dengan JavaScript?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Apa itu document.writeln di JavaScript?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Bagaimana menampilkan output ke HTML menggunakan JavaScript?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Apa perbedaan document.writeln dan console.log?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Kode apa yang digunakan untuk menulis teks ke halaman HTML?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Bagaimana mencetak teks di browser melalui JavaScript?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Contoh penggunaan document.writeln dalam JavaScript?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Apa hasil dari document.writeln() di JavaScript?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Bagaimana menampilkan pesan langsung ke halaman web?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Apa peran document.writeln di dalam kode JavaScript?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Bagaimana menulis teks dari JavaScript ke dokumen HTML?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Apa kegunaan document.writeln saat membuat halaman web dinamis?",
    "jawaban": "`document.writeln()` digunakan untuk menulis output langsung ke dokumen HTML.",
    "kode": "document.writeln(\"Selamat datang di JavaScript!\");"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan tipe data string di JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Apa itu string dalam JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Jelaskan tipe data string pada JavaScript!",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Tipe data apa yang digunakan untuk menyimpan teks di JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Bagaimana cara menyimpan teks di JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Contoh penggunaan tipe data string dalam JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Apa kegunaan tipe data string di JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Kapan kita menggunakan string di JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Apa karakteristik tipe data string pada JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Bagaimana menyimpan kata atau kalimat dalam JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "String termasuk tipe data apa di JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Apa perbedaan antara string dan number di JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Apa jenis data untuk menyimpan kalimat di JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Bagaimana mendeklarasikan variabel string di JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "String bisa berisi apa saja dalam JavaScript?",
    "jawaban": "Tipe data string digunakan untuk menyimpan teks, yang bisa berisi huruf, angka, dan simbol.",
    "kode": "let nama = \"budi\";\nlet angka = \"200\";\ndocument.writeln(nama + \" \" + angka);"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan tipe data number di JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Apa itu number dalam JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Jelaskan tipe data number pada JavaScript!",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Tipe data apa yang digunakan untuk angka di JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Bagaimana cara menyimpan angka di JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Contoh penggunaan tipe data number dalam JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Apa kegunaan tipe data number di JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Apa jenis data untuk angka di JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Apa perbedaan number dan string di JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Bagaimana menyimpan angka desimal dalam JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Number termasuk tipe data apa di JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Apa karakteristik dari tipe data number di JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Apa saja yang bisa disimpan dalam tipe number di JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Bagaimana cara mendeklarasikan angka di JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Kapan kita menggunakan tipe number dalam JavaScript?",
    "jawaban": "Tipe data number digunakan untuk menyimpan nilai berupa angka, baik bilangan bulat maupun desimal.",
    "kode": "let umur = 25;\nlet angka1 = 26;\ndocument.writeln(umur + \" \" + angka1);"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan tipe data boolean di JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Apa itu boolean dalam JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Jelaskan tipe data boolean pada JavaScript!",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Tipe data apa yang hanya bernilai true atau false di JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Bagaimana cara menyatakan nilai benar atau salah di JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Contoh penggunaan tipe data boolean dalam JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Apa kegunaan boolean di JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Kapan kita menggunakan tipe data boolean dalam JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Apa karakteristik dari tipe data boolean di JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Bagaimana boolean digunakan dalam logika program JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Boolean termasuk tipe data apa dalam JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Nilai apa saja yang bisa disimpan dalam tipe boolean di JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Bagaimana mendeklarasikan variabel boolean di JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Boolean dalam JavaScript digunakan untuk apa?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Bagaimana contoh nilai true dan false di JavaScript?",
    "jawaban": "Tipe data boolean hanya memiliki dua nilai: `true` dan `false`, dan sering digunakan untuk percabangan atau logika keputusan.",
    "kode": "let kamuBisa = true;\nlet kamuNyerah = false;\nconsole.log(kamuBisa);\nconsole.log(kamuNyerah);"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan tipe data null di JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Apa itu nilai null dalam JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Jelaskan arti null dalam JavaScript!",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Apa peran null dalam JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Kapan kita menggunakan null di JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Apa fungsi nilai null dalam JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Apa bedanya null dan undefined di JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Bagaimana contoh penggunaan null dalam JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Apa hasil dari document.writeln(null) di JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Bagaimana menyatakan variabel kosong di JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Apa maksud dari null dalam pemrograman JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Bagaimana mendeklarasikan variabel null di JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Tipe data null menyatakan apa dalam JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Nilai apa yang digunakan untuk menyatakan kosong secara sengaja?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Apa arti dari nilai null ketika digunakan dalam variabel JavaScript?",
    "jawaban": "Tipe data null adalah nilai khusus yang berarti 'kosong' secara sengaja.",
    "kode": "let nama = null;\ndocument.writeln(null);"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan tipe data undefined di JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Apa arti undefined dalam JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Jelaskan tipe data undefined pada JavaScript!",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Apa maksud dari nilai undefined dalam JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Apa perbedaan null dan undefined di JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Apa yang terjadi jika variabel belum diberi nilai di JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Bagaimana JavaScript menangani variabel tanpa nilai awal?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Contoh penggunaan tipe data undefined dalam JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Apa nilai default dari variabel yang belum diisi di JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Apa itu nilai undefined dalam pemrograman JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Bagaimana cara mendeteksi variabel yang belum memiliki nilai di JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Apa hasil dari mencetak variabel yang belum diisi nilainya?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Apa tipe data dari variabel kosong yang belum diberi nilai di JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Bagaimana status variabel baru yang belum diberi nilai di JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Kenapa variabel bisa bernilai undefined di JavaScript?",
    "jawaban": "Tipe data undefined menunjukkan bahwa variabel sudah dideklarasikan tetapi belum diberi nilai.",
    "kode": "let pekerjaan;\ndocument.writeln(pekerjaan);"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan tipe data object di JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Apa itu object dalam JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Jelaskan tipe data object dalam JavaScript!",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Untuk apa tipe data object digunakan dalam JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Bagaimana struktur object di JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Apa karakteristik tipe data object di JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Bagaimana cara menyimpan data kompleks dalam JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Apa itu pasangan key dan value dalam JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Contoh object yang bersarang dalam JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Apa itu nested object di JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Bagaimana cara menampilkan nilai dari properti dalam object JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Apa manfaat object dalam pengelolaan data JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Kapan kita menggunakan object dalam JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Apa perbedaan array dan object di JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Bagaimana mendefinisikan object di JavaScript?",
    "jawaban": "Tipe data object menyimpan data dalam bentuk pasangan key dan value, serta bisa bersarang dengan objek lain.",
    "kode": "let mahasiswa = {\n  nama: \"Budi\",\n  nim: 20220222212,\n  jurusan: \"Teknik Informatika\",\n  email: \"budi@gmail.com\",\n  hobi: {\n    hobi1: \"memancing\",\n    hobi2: \"reading\",\n    hobi3: \"running\",\n    hobi4: \"futsal\"\n  }\n};\nconsole.log(mahasiswa);\ndocument.writeln(mahasiswa.hobi.hobi4);"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan tipe data array di JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa itu array dalam JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Jelaskan tipe data array pada JavaScript!",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa fungsi array di JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa kegunaan array dalam pemrograman JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara menyimpan banyak nilai dalam satu variabel di JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa struktur data array digunakan untuk apa dalam JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara mengakses elemen array di JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Contoh penggunaan array dalam JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa hasil dari buah[2] pada array di JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana menyimpan daftar nama dalam JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa itu indeks dalam array JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa kelebihan penggunaan array di JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana mendeklarasikan array dalam JavaScript?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa saja isi dalam array dan bagaimana cara memanggilnya?",
    "jawaban": "Array adalah struktur data yang menyimpan sekumpulan nilai dalam satu variabel, dan setiap elemen memiliki indeks yang dimulai dari 0.",
    "kode": "let buah = [\"apel\", \"jeruk\", \"mangga\"];\ndocument.writeln(buah[2]);\ndocument.writeln(\"<br>\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara mengganti elemen array dengan indeks tertentu di JavaScript?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara update nilai array berdasarkan indeks di JavaScript?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa cara untuk mengubah isi array di JavaScript pada indeks tertentu?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana memodifikasi nilai array pada posisi tertentu di JavaScript?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa cara mengganti isi array pada index ke-2 di JavaScript?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana mengganti elemen array ke-n di JavaScript?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana mengubah elemen array dengan indeks tertentu?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Cara mengganti data array di index tertentu?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara menimpa nilai lama di array berdasarkan indeks?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa metode untuk mengganti nilai di dalam array pada index tertentu?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bisakah kita mengubah isi array di JavaScript berdasarkan indeks? Bagaimana caranya?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara edit nilai array di posisi tertentu?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana mengubah elemen ketiga dalam array di JavaScript?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa cara cepat mengganti nilai pada array?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana mengubah item array yang ada di index ke-2?",
    "jawaban": "Kita bisa mengakses elemen array berdasarkan indeksnya dan mengubah nilainya langsung.",
    "kode": "buah[2] = \"pisang\";\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana menambahkan elemen ke array di JavaScript dengan push dan unshift?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa fungsi dari push() dan unshift() dalam array JavaScript?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara menambahkan elemen di awal dan akhir array JavaScript?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa perbedaan antara push dan unshift dalam array?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan metode push dan unshift pada array?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Metode apa yang digunakan untuk menambah elemen array di JavaScript?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa kegunaan push() dan unshift() pada array?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa cara menambah item di awal dan akhir array di JavaScript?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Jelaskan cara kerja push dan unshift di array JavaScript!",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa hasil dari push dan unshift terhadap array?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana menambahkan elemen baru ke dalam array dengan push/unshift?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa yang terjadi jika kita menggunakan push dan unshift dalam array?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Kapan sebaiknya menggunakan push atau unshift di array JavaScript?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa peran push() dan unshift() dalam manipulasi array?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara menambah data ke depan dan belakang array dengan JavaScript?",
    "jawaban": "`push()` menambahkan elemen di akhir array, sedangkan `unshift()` menambahkan elemen di awal array.",
    "kode": "buah.push(\"nanas\");\ndocument.writeln(buah);\nbuah.unshift(\"manggis\");\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana menghapus elemen array dengan metode pop dan shift di JavaScript?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa fungsi pop() dan shift() dalam array JavaScript?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara menghapus elemen pertama dan terakhir dari array?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa perbedaan pop() dan shift() pada array di JavaScript?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana menggunakan fungsi pop dan shift di JavaScript?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Metode apa yang digunakan untuk menghapus elemen dari array?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa kegunaan pop() dan shift() dalam manipulasi array?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa hasil dari penggunaan pop dan shift pada array?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana menghapus elemen array dari posisi awal dan akhir?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa efek dari pop dan shift terhadap isi array?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana menghapus item terakhir dan pertama array dengan JavaScript?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa metode yang menghapus elemen awal dan akhir array?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Jelaskan fungsi pop dan shift dalam array JavaScript!",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Kapan kita menggunakan pop dan shift pada array?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara menghapus elemen pada ujung array?",
    "jawaban": "`pop()` menghapus elemen terakhir dari array, sedangkan `shift()` menghapus elemen pertama.",
    "kode": "buah.pop();\ndocument.writeln(buah);\nbuah.shift();\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan splice untuk menghapus dan menambahkan elemen di array?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa fungsi metode splice dalam array JavaScript?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara menyisipkan elemen di tengah array dengan splice()?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa kegunaan splice() di array JavaScript?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Jelaskan cara kerja splice() untuk manipulasi array!",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa yang dilakukan oleh splice(index, count) pada array?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara menghapus elemen dari posisi tertentu dengan splice()?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana menyisipkan data ke tengah array menggunakan splice?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa hasil dari buah.splice(1, 1) dan buah.splice(1, 0, \"jeruk\")?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana cara menyisipkan sekaligus menghapus elemen array dengan satu metode?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Metode apa yang bisa menyisipkan dan menghapus elemen array sekaligus?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa kelebihan splice() dibanding pop() dan shift() dalam array?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Apa maksud dari parameter dalam fungsi splice?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana menggunakan splice untuk edit elemen di posisi tengah array?",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Jelaskan penggunaan splice untuk manipulasi array secara fleksibel!",
    "jawaban": "`splice(index, jumlah)` digunakan untuk menghapus elemen mulai dari index tertentu. Kita juga bisa menyisipkan elemen baru dengan menambahkan argumen tambahan.",
    "kode": "buah.splice(1, 1); // hapus elemen index 1\ndocument.writeln(buah);\nbuah.splice(1, 0, \"jeruk\"); // sisipkan \"jeruk\" di index 1\ndocument.writeln(buah);"
  },
  {
    "pertanyaan": "Bagaimana mengetahui jumlah elemen dalam array di JavaScript?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Apa fungsi dari properti .length pada array?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Bagaimana cara menghitung panjang array?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Apa cara termudah untuk mengetahui jumlah item dalam array JavaScript?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Bagaimana cara menampilkan jumlah data di array?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Fungsi apa yang digunakan untuk menghitung isi array?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Bagaimana mengecek berapa banyak data dalam array?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Apa output dari Nama.length jika array memiliki 4 elemen?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Apa yang dilakukan oleh properti length pada array?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Berapa panjang array Nama jika berisi empat nama?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Bagaimana menghitung jumlah item dalam variabel array?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Apa cara melihat jumlah elemen dalam array menggunakan JavaScript?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Apa hasil dari properti length pada array dengan 4 elemen?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Berapa hasil dari Nama.length jika array berisi empat string?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Apa properti untuk menghitung jumlah elemen array di JavaScript?",
    "jawaban": "Gunakan properti `.length` untuk mengetahui panjang array atau jumlah elemennya.",
    "kode": "let Nama = [\"budi\", \"candra\", \"doni\", \"april\"];\ndocument.writeln(Nama.length);"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan array dua dimensi di JavaScript?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Bagaimana struktur array dua dimensi dalam JavaScript?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Apa fungsi dari array dua dimensi di JavaScript?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Bagaimana cara membuat array dua dimensi di JavaScript?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Apa itu matriks dalam JavaScript?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Bagaimana cara mengakses nilai dalam array dua dimensi?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Contoh array dua dimensi dalam JavaScript?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Apa keuntungan menggunakan array dua dimensi?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Bagaimana mendeklarasikan array matriks di JavaScript?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Bagaimana struktur data array bersarang dalam JavaScript?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Apa hasil dari matrix[2][2] dalam array dua dimensi?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Apa arti array bertingkat dalam JavaScript?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Bagaimana cara membuat tabel data menggunakan array di JavaScript?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Apa perbedaan array satu dimensi dan dua dimensi?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Bagaimana cara menampilkan isi array 2D di JavaScript?",
    "jawaban": "Array dua dimensi adalah array yang berisi array lain sebagai elemennya, membentuk struktur seperti matriks.",
    "kode": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\ndocument.writeln(matrix[0][2]);\ndocument.writeln(matrix[2]);\ndocument.writeln(matrix[2][2]);"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan operator aritmatika di JavaScript?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Apa itu operator matematika dalam JavaScript?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Sebutkan operator aritmatika dalam JavaScript!",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Untuk apa operator aritmatika digunakan dalam JavaScript?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Apa saja jenis operator aritmatika di JavaScript?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan operator +, -, *, / dalam JavaScript?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Apa hasil dari operasi a + b jika a = 10 dan b = 20?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Apa arti operator modulus (%) dalam JavaScript?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Berikan contoh penggunaan operator aritmatika dalam JavaScript!",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Bagaimana melakukan operasi matematika di JavaScript?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Apa fungsi operator + dalam JavaScript?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Bagaimana cara menghitung penjumlahan dua angka di JavaScript?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Apa peran operator aritmatika dalam coding JavaScript?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Bagaimana menggunakan operator aritmatika untuk logika perhitungan?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Apa perbedaan antara operator * dan / di JavaScript?",
    "jawaban": "Operator aritmatika digunakan untuk melakukan operasi matematika seperti penjumlahan, pengurangan, perkalian, pembagian, dan modulus (sisa bagi).",
    "kode": "// +, *, -, /, %\nlet a = 10;\nlet b = 20;\nconsole.log(a + b);"
  },
  {
    "pertanyaan": "Apa fungsi operator modulus dalam JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Untuk apa operator % digunakan dalam JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Apa arti dari simbol % dalam JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Apa yang dihasilkan oleh operator modulus (%)?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Bagaimana cara menghitung sisa bagi di JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Apa hasil dari 7 % 3 di JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Contoh penggunaan operator modulus dalam JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan operator % untuk mencari sisa pembagian?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Apa itu operasi modulus dalam pemrograman JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Bagaimana operator modulus bekerja dalam JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Apa perbedaan antara operator / dan % di JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Bagaimana menggunakan operator modulus untuk logika genap/ganjil?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Kenapa kita menggunakan operator % dalam JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Apa yang dimaksud operator sisa bagi dalam JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Bagaimana cara mengetahui apakah angka genap dengan % di JavaScript?",
    "jawaban": "Operator modulus (%) digunakan untuk menghitung sisa bagi dari pembagian dua bilangan. Misalnya, 5 % 2 menghasilkan 1.",
    "kode": "let c = 100;\nlet d = 10;\ndocument.writeln(\"Modulo dari 100 % 10 yaitu: \" + (c % d));"
  },
  {
    "pertanyaan": "Mengapa penjumlahan string dan angka bisa menghasilkan hasil yang salah di JavaScript?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Apa yang menyebabkan hasil dari '10 + 20' di string menjadi 1020?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Kenapa JavaScript menggabungkan angka dan string sebagai teks saat dijumlahkan?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Apa yang terjadi jika menggunakan + antara string dan angka di JavaScript?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Bagaimana cara menjumlahkan angka dalam string agar hasilnya benar di JavaScript?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Mengapa a + b dalam string bisa jadi gabungan, bukan hasil penjumlahan?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Bagaimana menjumlahkan angka di dalam string dengan benar di JavaScript?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Kenapa hasil a + b jadi gabungan string, bukan angka?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Apa kesalahan umum saat menjumlahkan angka dan string di JavaScript?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Bagaimana mencegah hasil 1020 ketika menampilkan penjumlahan angka dalam string?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Apa cara yang tepat untuk mencetak hasil penjumlahan angka dalam string?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Mengapa a + b dalam kalimat string menghasilkan concatenation?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Apa yang menyebabkan output angka salah saat dicetak dalam string?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Bagaimana menampilkan hasil penjumlahan angka di dalam kalimat string secara benar?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Kenapa perlu tanda kurung saat menjumlahkan angka di dalam string?",
    "jawaban": "Jika menggunakan tanda `+` untuk menggabungkan string dan angka tanpa tanda kurung, maka JavaScript akan menggabungkan sebagai string. Untuk menjumlahkan secara benar, gunakan tanda kurung.",
    "kode": "let a = 10;\nlet b = 20;\ndocument.writeln(\"Penjumlahan dari 10 + 20 yaitu: \" + (a + b));"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan operator perbandingan di JavaScript?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apa fungsi operator perbandingan dalam JavaScript?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Mengapa kita menggunakan operator perbandingan di JavaScript?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apa hasil dari operator perbandingan dalam JavaScript?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apa yang dikembalikan oleh operator perbandingan di JavaScript?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apa itu operator == dan === dalam JavaScript?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Sebutkan contoh operator perbandingan di JavaScript!",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apa beda operator == dan != di JavaScript?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apa itu nilai boolean dalam konteks operator perbandingan?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apa tujuan dari operator perbandingan?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Kapan kita menggunakan operator perbandingan dalam JavaScript?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apa yang dilakukan oleh tanda < dan > dalam JavaScript?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apa hasil dari 5 > 3 dalam JavaScript?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apakah operator === termasuk operator perbandingan?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apa jenis operator yang mengembalikan true atau false di JavaScript?",
    "jawaban": "Operator perbandingan digunakan untuk membandingkan dua nilai, dan hasilnya akan berupa boolean: `true` atau `false`.",
    "kode": null
  },
  {
    "pertanyaan": "Apa bedanya operator `==` dan `===` di JavaScript?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Mengapa hasil `==` dan `===` bisa berbeda di JavaScript?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Kapan sebaiknya menggunakan `===` daripada `==` di JavaScript?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Apa peran operator `===` dibanding `==`?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Mengapa `==` menghasilkan true tapi `===` menghasilkan false?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Apa arti dari `==` dan `===` dalam JavaScript?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Perbedaan logika antara `==` dan `===` di JavaScript?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Apa yang terjadi jika membandingkan string dan number dengan `==` dan `===`?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Bagaimana membandingkan nilai dan tipe data sekaligus di JavaScript?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Apa cara membandingkan dua nilai agar hasilnya lebih akurat di JavaScript?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Bagaimana cara membandingkan dua nilai dengan tipe data yang sama?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Apakah `==` dan `===` sama dalam hasil perbandingan?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Kenapa hasil a == b bisa true walau berbeda tipe data?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Apa rekomendasi penggunaan `==` atau `===` dalam JavaScript modern?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Bagaimana cara membandingkan dua variabel agar hasilnya tidak ambigu?",
    "jawaban": "`==` membandingkan nilai tanpa memperhatikan tipe data, sedangkan `===` membandingkan nilai sekaligus tipe datanya.",
    "kode": "let a = \"10\";\nlet b = 10;\ndocument.writeln(a == b); // true\ndocument.writeln(\"<br>\");\ndocument.writeln(a === b); // false"
  },
  {
    "pertanyaan": "Apa beda operator `!=` dan `!==` dalam JavaScript?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Apa arti dari operator tidak sama `!=` dan `!==` di JavaScript?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Mengapa `!=` dan `!==` bisa menghasilkan hasil yang berbeda?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Apa yang dilakukan oleh operator `!==` dalam perbandingan JavaScript?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Apa perbedaan antara perbandingan tidak sama longgar dan ketat di JavaScript?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Bagaimana perbedaan hasil antara `a != b` dan `a !== b`?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Apa hasil dari perbandingan '5' != 5 dan '5' !== 5?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Apa makna dari operator perbandingan `!=` dan `!==`?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Mengapa '5' != 5 adalah false, tapi '5' !== 5 adalah true?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Apa cara membandingkan ketidaksamaan nilai dan tipe secara ketat?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Apa fungsi dari operator strict not equal (`!==`) di JavaScript?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Apa perbedaan logika antara != dan !== dalam perbandingan?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Kapan harus menggunakan !== daripada != di JavaScript?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Mengapa perbandingan menggunakan !== lebih direkomendasikan?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Bagaimana cara membandingkan ketidaksamaan dengan mempertimbangkan tipe data?",
    "jawaban": "`!=` membandingkan apakah nilai tidak sama, tanpa memperhatikan tipe data. `!==` membandingkan nilai dan tipe datanya sekaligus.",
    "kode": "let a = \"5\";\nlet b = 5;\ndocument.writeln(a != b); // false\ndocument.writeln(a !== b); // true"
  },
  {
    "pertanyaan": "Apa makna dari operator `<`, `>`, `<=`, dan `>=` di JavaScript?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Apa arti simbol perbandingan `<`, `>`, `<=`, dan `>=` dalam JavaScript?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Untuk apa operator `<`, `>`, `<=`, dan `>=` digunakan di JavaScript?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Jelaskan fungsi dari `<`, `>`, `<=`, dan `>=` dalam JavaScript!",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Apa hasil dari operasi 3 < 5 dan 5 >= 5 di JavaScript?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Bagaimana cara membandingkan dua angka di JavaScript?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Apa kegunaan dari operator `<`, `>`, `<=`, dan `>=`?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Sebutkan fungsi dari operator pembanding dalam JavaScript seperti `<`, `>`!",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan operator kurang dari dan lebih dari?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Apa arti dari `<=` dan `>=` dalam JavaScript?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Bagaimana membaca operator perbandingan di JavaScript?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Apa hasil dari 5 <= 5 dan 5 > 3 di JavaScript?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Kapan kita menggunakan `<`, `>`, `<=`, dan `>=` dalam pemrograman?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Apa makna perbandingan `3 < 5` dan `5 >= 5`?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Bagaimana memahami operator `<`, `>`, `<=`, `>=` dengan benar?",
    "jawaban": "`<` berarti kurang dari, `>` lebih dari, `<=` kurang dari atau sama dengan, dan `>=` lebih dari atau sama dengan.",
    "kode": "console.log(3 < 5); // true\nconsole.log(5 >= 5); // true"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan operator logika di JavaScript?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Jelaskan pengertian operator logika dalam JavaScript!",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Apa itu logical operator di JavaScript?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Mengapa kita menggunakan operator logika di JavaScript?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Apa fungsi utama dari operator logika dalam JavaScript?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Apa yang dihasilkan oleh operator logika di JavaScript?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Sebutkan kegunaan operator logika dalam JavaScript!",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Apa hasil dari ekspresi logika dalam JavaScript?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Apa output operator logika AND, OR, NOT di JavaScript?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Bagaimana cara kerja operator logika di JavaScript?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Apa hasil akhir dari operator logika?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Apa saja jenis operator logika yang ada di JavaScript?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Kapan kita menggunakan operator logika di dalam program JavaScript?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Apa peran operator logika dalam pengambilan keputusan?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Apa hubungan operator logika dengan ekspresi boolean di JavaScript?",
    "jawaban": "Operator logika digunakan untuk menggabungkan dua atau lebih ekspresi logika dan menghasilkan nilai boolean (`true` atau `false`).",
    "kode": null
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan operator `&&` dalam JavaScript?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Bagaimana cara kerja operator `&&` di JavaScript?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Kapan hasil dari `&&` akan bernilai true?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Apa hasil dari ekspresi logika dengan `&&` jika salah satu bernilai false?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Mengapa `&&` menghasilkan false jika salah satu kondisi tidak terpenuhi?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Apa fungsi dari simbol `&&` dalam logika JavaScript?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Apa arti operator AND (`&&`) dalam JavaScript?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Bagaimana contoh penggunaan operator `&&` dalam JavaScript?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Apa syarat agar hasil dari `&&` bernilai true di JavaScript?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Apa efek dari operator logika `&&` jika kondisi pertama true dan kedua false?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Apakah `&&` mengembalikan boolean di JavaScript?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Bagaimana `&&` bekerja dengan dua ekspresi kondisi?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Apa hasil dari x > 0 && y < 0 jika x = 5 dan y = 10?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Apa itu operator logika `&&` dan bagaimana cara menggunakannya?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Kapan operator `&&` menghasilkan nilai false di JavaScript?",
    "jawaban": "`&&` (AND) menghasilkan `true` jika kedua kondisi bernilai `true`, dan `false` jika salah satu atau keduanya `false`.",
    "kode": "let x = 5;\nlet y = 10;\nconsole.log(x > 0 && y > 0); // true\nconsole.log(x > 0 && y < 0); // false"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan operator `||` dalam JavaScript?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Bagaimana cara kerja operator `||` di JavaScript?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Kapan operator `||` bernilai true di JavaScript?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Apa hasil dari operator `||` jika salah satu kondisi bernilai true?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Untuk apa operator logika `||` digunakan?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Apa arti simbol `||` dalam JavaScript?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Apa fungsi dari operator logika OR (`||`)?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Apa hasil dari ekspresi x > 0 || y < 0?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Apa perbedaan hasil antara operator `&&` dan `||`?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Apa yang dikembalikan oleh operator OR `||` jika satu kondisi benar?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Bagaimana hasil `||` jika kedua kondisi adalah false?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Apa syarat agar hasil operator `||` menjadi false?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Bagaimana operator `||` digunakan dalam percabangan logika?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Apa peran operator `||` dalam ekspresi logika JavaScript?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Mengapa operator `||` berguna dalam pengambilan keputusan?",
    "jawaban": "`||` (OR) menghasilkan `true` jika salah satu dari kondisi bernilai `true`, dan hanya `false` jika keduanya `false`.",
    "kode": "console.log(x > 0 || y < 0); // true"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan operator `!` di JavaScript?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Apa fungsi dari tanda seru `!` dalam JavaScript?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Bagaimana cara kerja operator `!` dalam ekspresi logika?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Apa hasil dari `!(x > 0)` jika x bernilai positif?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Apa yang dilakukan oleh operator logika NOT `!`?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Apa arti operator NOT dalam JavaScript?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Apa kegunaan dari operator `!` di JavaScript?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Bagaimana operator `!` mengubah hasil boolean?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Apa hasil dari operator `!true` dan `!false`?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Bagaimana cara membalik kondisi boolean di JavaScript?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Apa gunanya operator logika NOT `!` dalam percabangan?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Apa efek dari menggunakan `!` sebelum ekspresi logika?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Apa hasil dari `!false` dalam JavaScript?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Apa peran operator `!` dalam pengambilan keputusan logis?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Kapan kita perlu menggunakan operator `!` di JavaScript?",
    "jawaban": "`!` (NOT) membalik nilai boolean. Jika ekspresi bernilai `true`, maka hasilnya `false`, dan sebaliknya.",
    "kode": "console.log(!(x > 0)); // false"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan pernyataan `if` di JavaScript?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Apa fungsi `if` dalam JavaScript?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara kerja `if` dalam JavaScript?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Kapan kita menggunakan `if` di JavaScript?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Apa kegunaan struktur `if` di JavaScript?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Apa tujuan dari `if` statement dalam JavaScript?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Apa hasil dari blok `if` jika kondisi terpenuhi?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Jelaskan bagaimana `if` digunakan untuk pengambilan keputusan di JavaScript!",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Apa syarat agar perintah dalam `if` dijalankan?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Bagaimana contoh penggunaan if dalam JavaScript?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Apa hasil output dari `if (nilai > 75)` jika nilai = 80?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Apa itu blok `if` dalam bahasa pemrograman JavaScript?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Kapan kondisi dalam `if` dianggap benar di JavaScript?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Apa peran if dalam pengambilan keputusan di program?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Mengapa kita menggunakan if dalam logika pemrograman JavaScript?",
    "jawaban": "`if` digunakan untuk mengeksekusi blok kode jika kondisi yang diberikan bernilai `true`.",
    "kode": "let nilai = 80;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus!\");\n}"
  },
  {
    "pertanyaan": "Apa kegunaan `else` dalam JavaScript?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Kapan blok `else` dijalankan dalam JavaScript?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Apa fungsi dari struktur `else` pada pernyataan `if`?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Apa yang dilakukan `else` ketika kondisi `if` salah?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara kerja `else` di JavaScript?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Kapan sebaiknya kita menambahkan `else` setelah `if`?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Mengapa perlu menggunakan `else` dalam logika percabangan?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Apa yang terjadi jika kondisi `if` tidak terpenuhi dan ada `else`?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Apa hasil dari program if...else jika kondisi salah?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Bagaimana menggunakan else untuk menangani kondisi alternatif?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Apa peran `else` dalam struktur logika bercabang?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Jika kondisi `if` tidak terpenuhi, bagian mana yang dijalankan?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Apa yang ditampilkan jika nilai tidak lebih dari 75 dan ada `else`?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Mengapa kita membutuhkan `else` setelah `if`?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Apa yang terjadi jika kita tidak menggunakan `else` dan kondisi `if` salah?",
    "jawaban": "`else` digunakan untuk mengeksekusi blok kode jika kondisi pada `if` bernilai `false`.",
    "kode": "let nilai = 76;\nif (nilai > 75) {\n  document.writeln(\"Selamat, kamu lulus\");\n} else {\n  document.writeln(\"Maaf, anda gagal\");\n}"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan `else if` dalam JavaScript?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Apa kegunaan dari `else if` dalam struktur kontrol JavaScript?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Kapan kita menggunakan `else if` dalam logika percabangan?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Apa peran `else if` dalam pemrograman JavaScript?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara kerja `else if` dalam percabangan JavaScript?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Apa yang terjadi jika `if` salah dan ada `else if`?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Bagaimana menyusun banyak kondisi menggunakan `else if`?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Kapan perlu menggunakan lebih dari satu kondisi dengan `else if`?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Bagaimana menulis percabangan bertingkat dengan `else if`?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Mengapa kita menggunakan `else if` daripada banyak `if` terpisah?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Bagaimana if, else if, dan else bekerja bersama?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Apa hasil dari kode dengan banyak `else if` saat semua kondisi salah?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Apa bedanya `else if` dengan `if` terpisah?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Kapan kita harus menggunakan `else if` dalam program penilaian?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Apa solusi untuk banyak kondisi bertingkat dalam satu struktur logika?",
    "jawaban": "`else if` digunakan untuk memeriksa kondisi tambahan jika kondisi sebelumnya `false`. Digunakan untuk membuat percabangan bertingkat.",
    "kode": "let nilai = 49;\nif (nilai >= 90) {\n  document.writeln(\"Nilai kamu A\");\n} else if (nilai >= 75) {\n  document.writeln(\"Nilai kamu B\");\n} else if (nilai >= 60) {\n  document.writeln(\"Nilai kamu C\");\n} else if (nilai >= 50) {\n  document.writeln(\"Nilai kamu D\");\n} else {\n  document.writeln(\"Kamu remidi!!!\");\n}"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan switch case di JavaScript?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Apa fungsi switch case dalam JavaScript?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Kapan sebaiknya menggunakan switch case di JavaScript?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Apa keuntungan menggunakan switch case dibanding if else?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Bagaimana struktur switch case ditulis dalam JavaScript?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Apa hasil dari switch case jika tidak ada case yang cocok?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Apa peran default dalam switch case?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara kerja break dalam switch case?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Apa yang terjadi jika tidak ada break dalam switch case?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Apa hasil dari switch case jika nilai hari adalah \"Sabtu\"?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Apa perbedaan switch case dan if else?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara menangani beberapa case dengan satu output dalam switch?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Apa itu keyword case dalam switch statement JavaScript?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Bagaimana struktur switch case untuk mengecek nama hari?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Bagaimana penulisan switch case yang benar di JavaScript?",
    "jawaban": "`switch case` adalah alternatif dari banyak `if else` yang digunakan ketika ada banyak kondisi berdasarkan satu nilai yang dibandingkan. Penulisannya lebih rapi dan mudah dibaca.",
    "kode": "let hari = \"Sabtu\";\nswitch (hari) {\n  case \"Senin\":\n    document.writeln(\"Hari Kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    document.writeln(\"weekeeeeeeend\");\n    break;\n  default:\n    document.writeln(\"hari tidak dikenal\");\n}"
  },
  {
    "pertanyaan": "Apa fungsi dari perulangan for di JavaScript?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Kapan kita menggunakan perulangan `for` dalam JavaScript?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa itu struktur perulangan `for` di JavaScript?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa yang dilakukan oleh perulangan `for` dalam JavaScript?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa sintaks dasar dari perulangan `for` di JavaScript?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Bagaimana penulisan loop `for` di JavaScript?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Mengapa kita menggunakan `for` loop dalam JavaScript?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa contoh penggunaan perulangan `for` di JavaScript?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara mengulang kode lima kali dengan `for`?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa hasil dari for (let i = 0; i < 5; i++)?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara kerja perulangan `for` di JavaScript?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa itu loop `for` dan kapan digunakan?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara mengatur jumlah iterasi dengan `for`?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa kelebihan menggunakan `for` dibanding `while` saat iterasi tetap?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa yang terjadi jika kita melewatkan increment di `for` loop?",
    "jawaban": "`for` loop digunakan untuk mengulang blok kode sejumlah iterasi yang ditentukan. Cocok digunakan saat jumlah pengulangan sudah diketahui.",
    "kode": "for (let i = 0; i < 5; i++) {\n  document.writeln(\"Perulangan ke \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Seperti apa struktur penulisan `for` loop di JavaScript?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Apa sintaks lengkap dari perulangan `for` di JavaScript?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Bagaimana format umum dari for loop di JavaScript?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Apa komponen utama dalam struktur `for`?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Tuliskan struktur dasar perulangan `for`!",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Apa itu inisialisasi, kondisi, dan increment dalam `for` loop?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Apa saja bagian penting dari sintaks `for`?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Bagaimana bentuk penulisan loop `for` secara umum?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Jelaskan urutan komponen pada sintaks `for` di JavaScript!",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Apa yang terdapat dalam kurung pada `for` loop?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Apa isi dari parameter di dalam perulangan `for`?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Apa pola umum penulisan perulangan `for`?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Tunjukkan bentuk dasar sintaks `for`!",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Bagaimana menulis `for` loop dari 0 sampai kurang dari 3?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Apa bentuk umum perulangan `for` yang sering digunakan?",
    "jawaban": "Struktur dasar `for` adalah: `for (inisialisasi; kondisi; increment/decrement) { blok kode }`.",
    "kode": "// Contoh:\nfor (let i = 0; i < 3; i++) {\n  console.log(i);\n}"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan perulangan while di JavaScript?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Kapan sebaiknya menggunakan perulangan `while` dalam JavaScript?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Bagaimana cara kerja perulangan `while` di JavaScript?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa fungsi utama dari while loop dalam JavaScript?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa perbedaan perulangan `for` dan `while` dalam JavaScript?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa contoh penggunaan while loop di JavaScript?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa sintaks dasar perulangan while dalam JavaScript?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Bagaimana bentuk struktur perulangan while?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa yang terjadi jika kondisi while tidak lagi terpenuhi?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa hasil dari kode while jika i dimulai dari 0 dan kondisi i < 5?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa kelebihan menggunakan `while` daripada `for`?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Bagaimana kondisi bekerja dalam loop `while`?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa yang terjadi jika tidak ada increment dalam while loop?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa struktur yang cocok untuk perulangan tidak pasti jumlahnya?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Kapan kondisi while dicek dalam perulangan?",
    "jawaban": "`while` loop digunakan untuk mengulang blok kode selama kondisi bernilai `true`. Cocok digunakan saat jumlah perulangan belum diketahui secara pasti.",
    "kode": "let i = 0;\nwhile (i < 5) {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n}"
  },
  {
    "pertanyaan": "Bagaimana contoh penggunaan `while` untuk membaca input hingga 'exit'?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara menghentikan loop `while` saat input adalah 'exit'?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Apa teknik menggunakan `while` untuk membaca input berulang?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Bagaimana `while` digunakan untuk membaca input sampai kondisi terpenuhi?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Contoh loop `while` yang berjalan hingga user mengetikkan 'exit'?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Bagaimana loop `while` menghentikan input saat kondisi dipenuhi?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Apa penggunaan umum `while` dalam input pengguna yang berulang?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Bagaimana membuat program JavaScript yang menunggu input hingga 'exit'?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Apa metode untuk membaca input berulang hingga pengguna berhenti?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Bagaimana `while` digunakan untuk input tak terbatas hingga kondisi 'exit'?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Apa contoh sederhana penggunaan loop `while` untuk input kondisi berhenti?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara membuat prompt berulang dengan `while` sampai ketik 'exit'?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Apa hasil dari program yang memakai while dan prompt hingga exit?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Bagaimana loop `while` dikombinasikan dengan `prompt`?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Bagaimana implementasi loop `while` untuk input string hingga kondisi tertentu?",
    "jawaban": "`while` dapat digunakan untuk terus meminta input dari pengguna sampai memenuhi syarat tertentu, seperti mengetik kata 'exit'.",
    "kode": "let input = \"\";\nwhile (input !== \"exit\") {\n  input = prompt(\"Ketik (exit) untuk berhenti:\");\n}"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan perulangan `do while` di JavaScript?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Apa perbedaan `while` dan `do while` di JavaScript?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Kapan kita menggunakan `do while` dalam JavaScript?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Mengapa `do while` selalu menjalankan blok kode setidaknya sekali?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Apa kelebihan `do while` dibanding `while`?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Bagaimana cara kerja `do while` dalam JavaScript?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Apa struktur sintaks dari `do while` loop?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Tunjukkan contoh perulangan `do while` dalam JavaScript!",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Apa hasil dari kode do while jika kondisi awal bernilai false?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Apa yang dilakukan blok `do while` sebelum mengecek kondisi?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Mengapa `do while` cocok untuk perulangan minimal sekali?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Apa hasil dari perulangan `do while` sebanyak 10 kali?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Bagaimana bentuk umum sintaks `do while` loop di JavaScript?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Apa keunikan dari `do while` dibandingkan jenis perulangan lainnya?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Apa contoh `do while` yang langsung menjalankan perintah walau kondisi false?",
    "jawaban": "`do while` adalah jenis perulangan yang mengeksekusi blok kode **setidaknya sekali**, meskipun kondisi bernilai `false`. Kondisi dicek setelah perulangan pertama dijalankan.",
    "kode": "let i = 0;\ndo {\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n  i++;\n} while (i < 10);"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan perintah `break` di JavaScript?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa fungsi dari `break` dalam perulangan JavaScript?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Kapan kita menggunakan `break` dalam perulangan?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara kerja `break` di dalam loop JavaScript?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa hasil dari loop `for` jika ada `break` di tengah?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa yang dilakukan `break` dalam loop jika syarat tertentu terpenuhi?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa tujuan menggunakan `break` pada perulangan `for`?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Mengapa kita menggunakan `break` untuk menghentikan loop?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa efek dari `break` saat digunakan dalam perulangan?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Bagaimana `break` menghentikan perulangan meski kondisi belum salah?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Kapan `break` menghentikan eksekusi `for` loop?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa contoh penggunaan `break` untuk keluar dari perulangan?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Bagaimana menggunakan `break` saat nilai mencapai 5?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa hasil dari kode `for` dengan `break` saat i === 5?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa yang terjadi jika `break` dipanggil di tengah perulangan?",
    "jawaban": "`break` digunakan untuk menghentikan perulangan secara paksa sebelum kondisinya `false`, biasanya saat kondisi tertentu terpenuhi.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan perintah `continue` di JavaScript?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa fungsi dari `continue` dalam perulangan JavaScript?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara kerja `continue` dalam loop JavaScript?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa perbedaan `continue` dan `break` dalam perulangan?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Kapan kita menggunakan `continue` dalam perulangan JavaScript?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa hasil dari loop jika `continue` digunakan saat i === 5?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa tujuan penggunaan `continue` di dalam loop `for`?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa efek `continue` pada loop ketika kondisi terpenuhi?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa yang terjadi jika kita menggunakan `continue` dalam `for` loop?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Bagaimana `continue` dapat melewatkan proses pada nilai tertentu?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Bagaimana cara melompati nilai tertentu dalam perulangan menggunakan `continue`?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa contoh `continue` dalam perulangan yang melewatkan angka 5?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa hasil jika `continue` dijalankan saat i bernilai 5?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Mengapa `continue` tidak menghentikan loop tetapi hanya melewati iterasi?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa perbedaan hasil antara loop biasa dan loop dengan `continue` di iterasi ke-5?",
    "jawaban": "`continue` digunakan untuk melewatkan satu iterasi dalam perulangan dan langsung lanjut ke iterasi berikutnya.",
    "kode": "for (let i = 1; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  document.writeln(\"Perulangan ke: \" + i + \"<br>\");\n}"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan function di JavaScript?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Apa itu fungsi dalam JavaScript dan bagaimana cara kerjanya?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Apa kegunaan function dalam JavaScript?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Mengapa kita menggunakan function dalam JavaScript?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Bagaimana cara membuat function di JavaScript?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Apa yang terjadi saat function dipanggil berulang kali?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Apa hasil dari pemanggilan function beberapa kali?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Bagaimana bentuk dasar penulisan function?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Apa contoh sederhana dari function di JavaScript?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Bagaimana cara memanggil function berkali-kali?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Apa manfaat menggunakan function untuk tugas berulang?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Kenapa function penting dalam pemrograman JavaScript?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Apa yang dilakukan function saat dipanggil di JavaScript?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Bagaimana fungsi membantu menghindari penulisan kode berulang?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Apa istilah untuk blok kode yang dapat dipanggil berulang kali?",
    "jawaban": "Function adalah blok kode yang dirancang untuk melakukan tugas tertentu dan bisa dipanggil berulang kali.",
    "kode": "function sapa() {\n  document.writeln(\"Hallo, nama saya evelyn\" + \"<br>\");\n}\n\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();\nsapa();"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan function berparameter di JavaScript?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Bagaimana cara kerja function dengan parameter di JavaScript?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Apa kegunaan parameter pada function JavaScript?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Apa manfaat menggunakan parameter pada function?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Bagaimana parameter membuat function lebih fleksibel?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Apa yang terjadi jika function menerima parameter?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Apa maksud dari nilai default parameter dalam function?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Contoh function yang menerima argumen di JavaScript?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Apa arti argumen saat memanggil function di JavaScript?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Bagaimana function bisa menampilkan hasil berbeda dengan parameter?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Apa bedanya function dengan dan tanpa parameter?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Bagaimana menggunakan nilai default dalam parameter function?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Apa output dari function jika parameter tidak dikirim?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Mengapa function bisa menyesuaikan output dengan argumen?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Apa istilah untuk nilai yang diteruskan ke function?",
    "jawaban": "Function dengan parameter memungkinkan kita untuk mengirim nilai dari luar ke dalam fungsi, sehingga hasilnya bisa berbeda tergantung nilai yang dikirim.",
    "kode": "function sapa(nama = \"evelyn\") {\n  document.writeln(\"Hallo, \" + nama + \"<br>\");\n}\n\nsapa();"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan function yang menggunakan return di JavaScript?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Apa kegunaan `return` dalam sebuah function JavaScript?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Bagaimana function dengan `return` bekerja di JavaScript?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Apa perbedaan function dengan `return` dan tanpa `return`?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Apa hasil yang diberikan oleh function yang memiliki return?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Bagaimana cara mengambil nilai dari function menggunakan return?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Apa arti nilai yang dikembalikan oleh function di JavaScript?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Contoh penggunaan return dalam function JavaScript?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Apa yang dilakukan kata kunci `return` dalam function?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Bagaimana menggunakan return untuk menyimpan hasil ke variabel?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Apa kelebihan menggunakan return dalam function JavaScript?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Apa maksud dari nilai return di dalam function?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Apa yang dikembalikan oleh function berikut: `return a + b;`?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Mengapa penting menggunakan return dalam function yang menghasilkan nilai?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Apa manfaat `return` saat ingin menggunakan hasil fungsi di tempat lain?",
    "jawaban": "Function dengan `return` akan mengembalikan nilai hasil dari proses di dalam fungsi, sehingga nilainya bisa digunakan di luar fungsi tersebut.",
    "kode": "function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(5, 3);\ndocument.writeln(\"hasilya yaitu: \" + hasil);"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan arrow function di JavaScript?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Bagaimana cara menulis arrow function di JavaScript?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Apa perbedaan arrow function dengan function biasa?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Kapan sebaiknya menggunakan arrow function?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Apa kelebihan arrow function dalam JavaScript?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Bagaimana contoh penggunaan arrow function?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Apa itu tanda `=>` dalam JavaScript?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Apa hasil dari arrow function berikut: `(a, b) => a * b`?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Mengapa arrow function lebih ringkas dibanding function biasa?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Bagaimana cara membuat fungsi `kali` dengan arrow function?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Apa ciri khas dari arrow function di JavaScript?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Apa bentuk penulisan singkat fungsi di JavaScript?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Bagaimana menulis fungsi tanpa kata kunci `function`?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Apa nama fungsi pendek dengan `=>` di JavaScript?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Apa keuntungan memakai arrow function dalam program singkat?",
    "jawaban": "Arrow function adalah cara penulisan fungsi yang lebih ringkas menggunakan tanda panah `=>`. Biasanya digunakan untuk fungsi sederhana.",
    "kode": "const kali = (a, b) => a * b;\ndocument.writeln(\"Hasilnya yaitu: \" + kali(5, 8));"
  },
  {
    "pertanyaan": "Apa beda antara var, let, dan const di JavaScript?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Jelaskan perbedaan var, let, dan const!",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Kapan sebaiknya menggunakan var, let, atau const?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Apa perbedaan penggunaan var, let, dan const?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Bagaimana karakteristik var dibanding let dan const?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Mengapa const tidak bisa diubah nilainya?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Apa kelebihan menggunakan let dibanding var?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Apa itu block scope pada let dan const?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Kenapa var dianggap sudah usang dibanding let dan const?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Apa jenis scope dari var, let, dan const?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Apa saja perbedaan penting antara var, let dan const?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Apa pengaruh scope terhadap deklarasi var, let, dan const?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Apakah var bisa diubah dan dideklarasikan ulang?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Kenapa let dan const tidak keluar dari blok?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Bagaimana deklarasi variabel yang aman dan efisien di JavaScript?",
    "jawaban": "`var` bersifat function-scoped dan bisa di-redeclare. `let` dan `const` bersifat block-scoped. `let` nilainya bisa diubah, sedangkan `const` tidak bisa.",
    "kode": "var nama = 'Budi';\nlet umur = 25;\nconst jenisKelamin = 'Laki-laki';"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan hoisting di JavaScript?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Apa itu hoisting dan bagaimana cara kerjanya?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Bagaimana hoisting mempengaruhi eksekusi kode JavaScript?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Apa efek hoisting pada deklarasi variabel?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Apa yang terjadi jika kita memanggil variabel sebelum dideklarasikan?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Bagaimana contoh hoisting pada variabel dengan `var`?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Mengapa `console.log(nama)` menghasilkan `undefined` meskipun sudah ada deklarasi `var nama`?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Apakah `let` dan `const` juga mengalami hoisting?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Apa perbedaan hoisting antara var, let, dan const?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Apa yang dimaksud variabel di-hoist dalam JavaScript?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Bagaimana cara kerja hoisting pada fungsi?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Apa itu hoisting dan kenapa penting diketahui dalam JavaScript?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Mengapa variabel var bisa digunakan sebelum deklarasi?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Apa hasil dari hoisting pada kode dengan var sebelum inisialisasi?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Apa maksud 'diangkat ke atas' dalam konteks hoisting?",
    "jawaban": "Hoisting adalah mekanisme di mana deklarasi variabel atau fungsi 'diangkat' ke atas sebelum kode dieksekusi.",
    "kode": "console.log(nama); // undefined\nvar nama = 'Evelyn';"
  },
  {
    "pertanyaan": "Bagaimana cara mengetahui tipe data dari sebuah variabel di JavaScript?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Apa cara untuk memeriksa tipe data variabel di JavaScript?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Bagaimana menggunakan `typeof` di JavaScript?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Apa fungsi operator `typeof` dalam JavaScript?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Apa output dari `typeof umur` jika umur = 20?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Bagaimana cara mengecek apakah nilai bertipe number?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Dengan perintah apa kita mengecek tipe data sebuah nilai?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Apa hasil `typeof` jika digunakan pada angka?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Bagaimana memeriksa apakah variabel bertipe string atau number?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Apa cara termudah untuk mengetahui tipe variabel di JavaScript?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Operator apa yang digunakan untuk cek tipe data di JavaScript?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Bagaimana `typeof` membantu dalam debugging?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Contoh penggunaan `typeof` untuk variabel angka?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Apa hasil dari `typeof` pada variabel bertipe number?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Bagaimana cara melihat jenis data dari sebuah variabel di JavaScript?",
    "jawaban": "Gunakan operator `typeof` untuk mengetahui tipe data suatu nilai atau variabel.",
    "kode": "let umur = 20;\nconsole.log(typeof umur); // number"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan operator ternary di JavaScript?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Bagaimana cara menulis operator ternary dalam JavaScript?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Apa fungsi operator ternary di JavaScript?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Apa contoh penggunaan ternary operator dalam JavaScript?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Apa bentuk singkat dari if-else dalam JavaScript?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Apa sintaks operator ternary di JavaScript?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Kapan kita menggunakan ternary operator dalam JavaScript?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Apa hasil dari `umur >= 17 ? 'Dewasa' : 'Anak-anak'` jika umur = 18?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan ternary untuk menentukan status umur?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Apa kelebihan ternary operator dibanding if-else biasa?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Bagaimana cara singkat menulis kondisi di JavaScript?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Apa hasil dari ternary jika kondisi bernilai true?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Bagaimana menggunakan ternary untuk menentukan kategori?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Operator apa yang digunakan untuk kondisi singkat dalam JavaScript?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Contoh ternary operator yang menghasilkan 'Dewasa' jika umur >= 17?",
    "jawaban": "Operator ternary adalah bentuk singkat dari if-else. Sintaks: `kondisi ? nilaiJikaBenar : nilaiJikaSalah`.",
    "kode": "let umur = 18;\nlet status = umur >= 17 ? 'Dewasa' : 'Anak-anak';"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan template literal di JavaScript?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan template literal dalam JavaScript?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Apa fungsi dari template literal dalam JavaScript?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Bagaimana menulis string yang berisi variabel di JavaScript?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Apa simbol yang digunakan dalam template literal?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Apa kelebihan template literal dibanding string biasa?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Bagaimana cara menggabungkan string dan variabel dengan backtick?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Apa itu interpolasi string dalam JavaScript?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Apa perbedaan antara template literal dan string konvensional?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Kapan sebaiknya menggunakan template literal?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Apa itu backtick dalam penulisan JavaScript?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Contoh penulisan template literal di JavaScript?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Bagaimana cara menulis string dinamis dengan template literal?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Apa gunanya simbol `${}` dalam string?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Bagaimana mencetak nama di dalam string dengan template literal?",
    "jawaban": "Template literal memungkinkan interpolasi variabel dan ekspresi ke dalam string menggunakan tanda backtick (`` ` ``).",
    "kode": "let nama = 'Evelyn';\nlet pesan = `Hallo, nama saya ${nama}`;"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan event listener di JavaScript?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan addEventListener di JavaScript?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Apa fungsi addEventListener dalam JavaScript?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Bagaimana menangani event klik dengan JavaScript?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Apa itu event handler dan bagaimana cara menambahkannya?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Bagaimana mendeteksi klik pada elemen HTML dengan JavaScript?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Apa yang terjadi saat kita menambahkan addEventListener ke tombol?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Bagaimana menambahkan event klik ke tombol menggunakan JavaScript?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Apa itu metode addEventListener dan contohnya?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Bagaimana cara menjalankan fungsi saat tombol diklik di JavaScript?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Contoh penggunaan addEventListener pada elemen tombol?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Apa metode untuk merespon aksi pengguna seperti klik di JavaScript?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Bagaimana cara menambahkan event listener ke ID tertentu?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Apa hasil dari event listener saat tombol diklik?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Mengapa penting menggunakan addEventListener dalam interaksi pengguna?",
    "jawaban": "`addEventListener` digunakan untuk menjalankan fungsi ketika suatu event terjadi pada elemen DOM.",
    "kode": "document.getElementById('tombol').addEventListener('click', function() {\n  alert('Tombol diklik!');\n});"
  },
  {
    "pertanyaan": "Bagaimana mengubah isi elemen HTML dengan JavaScript?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Apa cara manipulasi konten HTML lewat JavaScript?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Bagaimana memanipulasi elemen HTML menggunakan DOM?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Bagaimana cara mengganti teks elemen HTML dari JavaScript?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Contoh penggunaan `getElementById` untuk mengubah isi HTML?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Apa fungsi `innerHTML` dalam JavaScript?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Bagaimana JavaScript dapat memodifikasi halaman web?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Apa peran DOM dalam manipulasi HTML?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Bagaimana cara JavaScript mengakses elemen HTML?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Apa yang digunakan JavaScript untuk mengubah konten HTML?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Bagaimana mengakses elemen HTML dengan ID menggunakan JavaScript?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Apa contoh manipulasi teks dalam tag HTML menggunakan JavaScript?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Bagaimana cara mengganti teks HTML tanpa reload halaman?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Apa metode untuk memodifikasi elemen dengan ID tertentu?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Bagaimana manipulasi elemen DOM bisa dilakukan dengan JavaScript?",
    "jawaban": "Gunakan DOM seperti `getElementById`, `innerHTML`, dan `style` untuk mengakses dan mengubah elemen HTML.",
    "kode": "document.getElementById('judul').innerHTML = 'Halo Dunia';"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan localStorage di JavaScript?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Bagaimana cara menyimpan data di browser dengan localStorage?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Apa fungsi localStorage dalam JavaScript?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Bagaimana menyimpan dan mengambil data dengan localStorage?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Apa perbedaan localStorage dengan sessionStorage?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Apakah data di localStorage akan hilang saat browser ditutup?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Bagaimana cara kerja localStorage di JavaScript?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Bagaimana menyimpan nilai 'nama' ke dalam localStorage?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Apa contoh penggunaan localStorage di JavaScript?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Bagaimana mengambil kembali data dari localStorage?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Apakah localStorage menyimpan data secara permanen di browser?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Apa metode yang digunakan untuk menyimpan data ke localStorage?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Dengan cara apa kita bisa menyimpan dan membaca data lokal di browser?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Apa hasil dari `localStorage.getItem('nama')` setelah diset?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Mengapa menggunakan localStorage untuk menyimpan data user?",
    "jawaban": "`localStorage` adalah penyimpanan data di browser yang tidak hilang meskipun halaman di-refresh atau browser ditutup.",
    "kode": "localStorage.setItem('nama', 'Evelyn');\nlet nama = localStorage.getItem('nama');"
  },
  {
    "pertanyaan": "Bagaimana cara menangkap error di JavaScript?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Apa fungsi try-catch dalam JavaScript?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Bagaimana menangani kesalahan agar program tidak berhenti?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Contoh penggunaan try-catch di JavaScript?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Apa itu blok try-catch dan kapan digunakan?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Bagaimana cara menjaga program tetap berjalan saat ada error?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Apa manfaat menggunakan try-catch di JavaScript?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Kapan sebaiknya memakai try-catch?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Bagaimana mencegah crash saat terjadi error?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Apa yang terjadi jika error tidak ditangani dengan try-catch?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Bagaimana cara debugging dengan try-catch?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Apa itu error handling di JavaScript?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Bagaimana cara menghindari program berhenti karena error?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Apa yang ditulis di dalam catch pada try-catch block?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Mengapa penting menangani error menggunakan try-catch?",
    "jawaban": "Gunakan blok `try-catch` untuk menangkap dan menangani error agar program tetap berjalan.",
    "kode": "try {\n  let hasil = x + y;\n} catch (error) {\n  console.error('Terjadi error:', error);\n}"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan callback function di JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Apa itu callback dalam pemrograman JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Bagaimana cara kerja callback function di JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Apa manfaat callback function dalam JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Mengapa menggunakan callback function di JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Contoh penggunaan callback function dalam JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Bagaimana meneruskan fungsi sebagai parameter ke fungsi lain?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Apa itu fungsi sebagai parameter (callback) di JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Apa hasil dari fungsi prosesData dengan callback?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Bagaimana contoh pemanggilan callback di dalam fungsi?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Apa maksud callback function sebagai argumen?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Kapan kita menggunakan callback dalam JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Apa yang terjadi saat fungsi callback dipanggil?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Apa kelebihan menggunakan callback function?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Bagaimana struktur dasar callback function di JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan akan dipanggil di dalamnya.",
    "kode": "function prosesData(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nprosesData('Data 1', function() {\n  console.log('Selesai');\n});"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan DOM di JavaScript?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Apa itu Document Object Model (DOM) dalam JavaScript?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Apa fungsi DOM dalam pengembangan web dengan JavaScript?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Bagaimana JavaScript berinteraksi dengan DOM?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Apa hubungan antara JavaScript dan DOM?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Bagaimana struktur DOM direpresentasikan dalam JavaScript?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Mengapa DOM penting dalam JavaScript?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Apa peran DOM saat JavaScript memodifikasi halaman?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Apa itu pohon objek DOM dalam JavaScript?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Apa maksud struktur pohon DOM di JavaScript?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Bagaimana elemen HTML diakses melalui DOM?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Apa manfaat DOM untuk manipulasi halaman web?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Apa itu DOM dan bagaimana JavaScript menggunakannya?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Apa arti DOM dalam konteks JavaScript dan HTML?",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Jelaskan konsep DOM dalam JavaScript!",
    "jawaban": "DOM (Document Object Model) adalah representasi struktur halaman web sebagai pohon objek. JavaScript dapat digunakan untuk mengakses dan memanipulasi elemen dalam DOM.",
    "kode": null
  },
  {
    "pertanyaan": "Apa fungsi `getElementById` dalam JavaScript?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Bagaimana cara menggunakan `getElementById` untuk akses elemen?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Contoh penggunaan `getElementById` dalam JavaScript?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Apa hasil dari `document.getElementById('judul')`?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Bagaimana mengubah isi elemen menggunakan `getElementById`?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Mengapa `getElementById` penting dalam manipulasi DOM?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Bagaimana cara akses elemen HTML berdasarkan id-nya?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Apa yang dilakukan `getElementById` pada DOM?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Bagaimana cara menargetkan elemen dengan id tertentu di JavaScript?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Apa metode paling umum untuk mengambil elemen HTML berdasarkan id?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Bagaimana cara mendapatkan elemen dengan id 'judul'?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Apa hasil dari mengubah `innerHTML` pada elemen yang diambil dengan `getElementById`?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Apakah `getElementById` hanya mengambil satu elemen?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Apa metode DOM untuk akses elemen berdasarkan id?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Jelaskan cara menggunakan `getElementById` untuk manipulasi teks?",
    "jawaban": "`getElementById` digunakan untuk mengambil elemen berdasarkan atribut id-nya.",
    "kode": "let elemen = document.getElementById('judul');\nelemen.innerHTML = 'Teks diubah';"
  },
  {
    "pertanyaan": "Apa bedanya `getElementById`, `getElementsByClassName`, dan `querySelector`?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Apa perbedaan penggunaan `getElementById`, `getElementsByClassName`, dan `querySelector`?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Bagaimana membedakan `getElementById`, `getElementsByClassName`, dan `querySelector`?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Apa fungsi masing-masing dari `getElementById`, `getElementsByClassName`, dan `querySelector`?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Kapan harus menggunakan `getElementById`, `getElementsByClassName`, atau `querySelector`?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Apa perbedaan output dari `getElementById`, `getElementsByClassName`, dan `querySelector`?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Apa bedanya `getElementsByClassName` dan `querySelector`?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Mengapa `querySelector` lebih fleksibel dari yang lain?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Apa kelebihan `querySelector` dibanding `getElementById` dan `getElementsByClassName`?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Bagaimana cara memilih elemen berdasarkan class dan id di JavaScript?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Apa perbedaan antara memilih elemen dengan id, class, dan selector?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Manakah yang digunakan untuk mengambil banyak elemen berdasarkan class?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Apa hasil `getElementsByClassName` dibanding `querySelectorAll`?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Apakah `querySelector` bisa mengambil elemen berdasarkan id atau class?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Bagaimana cara mengambil elemen dengan berbagai selector di JavaScript?",
    "jawaban": "`getElementById` mengambil 1 elemen berdasarkan id. `getElementsByClassName` mengambil kumpulan elemen berdasarkan class. `querySelector` lebih fleksibel dan bisa mengambil berdasarkan selector CSS.",
    "kode": "let satu = document.getElementById('judul');\nlet banyak = document.getElementsByClassName('kotak');\nlet selector = document.querySelector('.kotak');"
  },
  {
    "pertanyaan": "Bagaimana cara mengganti teks elemen HTML dengan JavaScript?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Apa fungsi `.innerHTML` dalam JavaScript?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Bagaimana cara memodifikasi teks dalam elemen HTML?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Apa cara termudah mengubah teks HTML menggunakan JavaScript?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Bagaimana JavaScript dapat mengubah isi elemen HTML?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Dengan metode apa JavaScript mengganti konten elemen?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Contoh penggunaan `.innerHTML` dalam JavaScript?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Apa perbedaan `innerHTML` dengan `textContent`?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Bagaimana mengubah isi paragraf dengan JavaScript?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Apa yang dilakukan properti `innerHTML`?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Bagaimana cara menampilkan teks baru dalam elemen HTML?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Bagaimana cara JavaScript mengedit isi elemen dengan id tertentu?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Apakah bisa mengganti teks elemen HTML lewat JavaScript?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Apa metode yang digunakan untuk mengubah isi elemen HTML?",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Jelaskan bagaimana `innerHTML` mengubah konten HTML!",
    "jawaban": "Gunakan properti `.innerHTML` untuk mengganti konten dari suatu elemen.",
    "kode": "document.getElementById('judul').innerHTML = 'Selamat Datang!';"
  },
  {
    "pertanyaan": "Bagaimana cara mengganti warna teks elemen HTML dengan JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Apa fungsi `.style` dalam JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Bagaimana cara mengubah tampilan elemen HTML lewat JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Apa metode untuk mengedit style elemen menggunakan JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Contoh pengubahan warna teks HTML dengan JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Apa cara paling mudah mengatur style elemen HTML di JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Bagaimana JavaScript mengatur CSS pada elemen HTML?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Apa yang dilakukan properti `.style` di JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Bagaimana mengubah warna elemen HTML dengan JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Apa kegunaan `element.style` dalam manipulasi CSS?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Apa cara mengubah properti CSS secara langsung di JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Bagaimana merubah warna font elemen HTML lewat JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Metode apa yang digunakan JavaScript untuk ubah CSS elemen?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Bagaimana menambahkan style pada elemen HTML via JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Apa cara mengubah style inline HTML dengan JavaScript?",
    "jawaban": "Gunakan properti `.style` untuk mengubah gaya CSS secara langsung.",
    "kode": "document.getElementById('judul').style.color = 'red';"
  },
  {
    "pertanyaan": "Bagaimana cara membuat elemen HTML baru dengan JavaScript?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Apa fungsi dari `createElement` di JavaScript?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Bagaimana cara menambahkan elemen ke DOM secara dinamis?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Apa metode JavaScript untuk membuat elemen HTML baru?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Contoh kode membuat paragraf baru dengan JavaScript?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Apa langkah-langkah menambahkan elemen ke halaman dengan JavaScript?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Bagaimana JavaScript dapat menambahkan tag baru ke halaman?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Bagaimana menggunakan `appendChild` untuk menambah elemen?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Apa peran `innerText` saat membuat elemen baru dengan JavaScript?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Bagaimana cara membuat dan menambahkan paragraf secara dinamis?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Bagaimana JavaScript menyisipkan elemen baru ke dalam `body`?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Metode apa yang digunakan untuk membuat node HTML baru?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Apa cara membuat elemen paragraf baru di JavaScript?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Bagaimana menambahkan konten baru ke DOM dengan JavaScript?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Langkah membuat elemen baru lalu menampilkannya di halaman?",
    "jawaban": "Gunakan `createElement`, `appendChild`, dan `innerText` untuk membuat dan menambahkan elemen ke halaman.",
    "kode": "let p = document.createElement('p');\np.innerText = 'Ini paragraf baru';\ndocument.body.appendChild(p);"
  },
  {
    "pertanyaan": "Bagaimana cara menghapus elemen dari halaman HTML dengan JavaScript?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Apa metode untuk menghapus elemen HTML di JavaScript?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Bagaimana menghilangkan elemen dari DOM menggunakan JavaScript?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Apa fungsi `.remove()` dalam JavaScript?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Contoh menghapus elemen HTML dengan JavaScript?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Bagaimana cara menghapus node HTML lewat JavaScript?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Apa kegunaan `removeChild` dalam JavaScript?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Apa metode terbaik untuk menghapus elemen berdasarkan id?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Bagaimana cara membersihkan elemen dari halaman secara dinamis?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Apa hasil dari `document.getElementById('hapusSaya').remove()`?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Bagaimana menghapus elemen berdasarkan id di JavaScript?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Apa bedanya `remove()` dengan `removeChild()`?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Apakah bisa menghapus elemen HTML hanya dengan JavaScript?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Langkah menghapus tag HTML dengan JavaScript?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Bagaimana menghapus elemen dari struktur DOM di JavaScript?",
    "jawaban": "Gunakan `.remove()` atau `parentNode.removeChild()` untuk menghapus elemen dari DOM.",
    "kode": "let elemen = document.getElementById('hapusSaya');\nelemen.remove();"
  },
  {
    "pertanyaan": "Apa perbedaan antara operator `==` dan `===`?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Kapan sebaiknya menggunakan `===` dibanding `==` di JavaScript?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Apa bedanya `==` dan `===` dalam perbandingan nilai?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Apa yang dibandingkan oleh `==` dan `===`?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Mengapa hasil `5 == '5'` dan `5 === '5'` berbeda?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Apa kelebihan `===` dibandingkan `==` di JavaScript?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Kenapa `===` lebih disarankan daripada `==`?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Apa hasil dari `5 == '5'` dan `5 === '5'` dalam JavaScript?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Perbandingan mana yang memperhatikan tipe data: `==` atau `===`?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Apakah `==` dan `===` selalu memberikan hasil yang sama?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Kapan hasil `==` bisa berbeda dengan `===`?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Operator mana yang melakukan perbandingan ketat di JavaScript?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Apa arti strict equality dalam JavaScript?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Apakah `===` membandingkan lebih ketat daripada `==`?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Apa contoh perbedaan hasil antara `==` dan `===`?",
    "jawaban": "`==` membandingkan nilai saja tanpa memperhatikan tipe data. Sedangkan `===` membandingkan nilai **dan** tipe datanya sekaligus.",
    "kode": "console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false"
  },
  {
    "pertanyaan": "Apa beda `null` dan `undefined` di JavaScript?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Kapan kita menggunakan `null` dan kapan `undefined` di JavaScript?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Apa arti `undefined` dan `null` pada variabel JavaScript?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Contoh perbedaan antara `undefined` dan `null`?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Apa hasil dari console.log untuk `undefined` dan `null`?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Apa yang dimaksud `undefined` di JavaScript?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Apa perbedaan penggunaan `null` dan `undefined`?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Bagaimana membedakan variabel bernilai `null` dan `undefined`?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Apa yang terjadi jika variabel dideklarasikan tapi tidak diberi nilai?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Apa arti variabel yang bernilai `null`?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Kapan variabel mendapatkan nilai `undefined` secara otomatis?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Apakah `null` dan `undefined` dianggap sama?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Apa nilai default dari variabel tanpa inisialisasi?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Apa yang dimaksud null assignment di JavaScript?",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Jelaskan perbedaan tipe data `null` dan `undefined`!",
    "jawaban": "`undefined` berarti variabel telah dideklarasikan tetapi belum diberi nilai. `null` berarti nilai kosong yang ditetapkan secara eksplisit.",
    "kode": "let a;\nconsole.log(a); // undefined\nlet b = null;\nconsole.log(b); // null"
  },
  {
    "pertanyaan": "Kapan waktu yang tepat memakai `for` loop dibanding `while`?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa kondisi yang menentukan pemakaian `for` daripada `while`?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa kelebihan `for` dibandingkan `while` dalam perulangan tertentu?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Kapan loop `for` lebih efisien daripada `while`?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Jika kita tahu jumlah iterasi, harus pakai `for` atau `while`?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Loop mana yang cocok saat kita tahu batasnya: `for` atau `while`?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Kapan lebih tepat memilih `while` daripada `for` loop?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Perbedaan kondisi penggunaan `for` dan `while`?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Manakah loop yang digunakan untuk iterasi yang pasti jumlahnya?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Kenapa kita menggunakan `for` ketika jumlah iterasi diketahui?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Kapan lebih baik memilih `for loop` daripada `while loop`?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Apakah `for` loop bisa diganti dengan `while` loop?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa pertimbangan dalam memilih `for` atau `while`?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa beda utama antara `for` dan `while` loop?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Loop mana yang dipakai kalau iterasi diketahui sebelumnya?",
    "jawaban": "`for` cocok digunakan ketika jumlah perulangan sudah diketahui. `while` lebih baik digunakan ketika jumlah perulangan belum pasti.",
    "kode": "// for loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n\n// while loop\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan `this` di JavaScript?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Bagaimana cara kerja `this` dalam JavaScript?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Apa fungsi dari keyword `this` dalam JavaScript?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Mengapa `this` penting dalam pemrograman JavaScript?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Bagaimana `this` merujuk objek saat fungsi dipanggil?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Contoh penggunaan `this` dalam object JavaScript?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Kapan `this` mengacu ke objek saat ini?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Bagaimana cara `this` mengakses properti objek di JavaScript?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Mengapa `this` mengarah ke objek pemanggil fungsi?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Apa arti `this.nama` dalam contoh object JavaScript?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Bagaimana `this` bekerja dalam method object?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Dalam konteks objek, apa yang diwakili oleh `this`?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Apakah `this` berubah tergantung cara fungsi dipanggil?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Apa nilai `this` jika fungsi dipanggil dari objek?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Bagaimana `this` bekerja saat digunakan dalam objek literal?",
    "jawaban": "`this` merujuk pada objek yang saat ini menjalankan fungsi. Nilainya bergantung pada konteks pemanggilan.",
    "kode": "const user = {\n  nama: 'Evelyn',\n  sapa: function() {\n    console.log('Hallo, ' + this.nama);\n  }\n};\nuser.sapa();"
  },
  {
    "pertanyaan": "Apa yang dimaksud dengan callback function di JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Bagaimana cara kerja callback function di JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Apa fungsi dari callback dalam JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Apa itu fungsi callback dan bagaimana digunakan di JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Contoh sederhana penggunaan callback function dalam JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Apa perbedaan callback function dengan function biasa?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Kapan kita menggunakan callback function dalam JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Mengapa callback function penting dalam JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Bagaimana cara mengirim fungsi sebagai parameter di JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Apa manfaat menggunakan callback dalam fungsi JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Apa hasil dari menjalankan fungsi dengan callback?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Apa arti callback dalam pemrograman JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Apakah callback bisa digunakan di fungsi asinkron JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Bagaimana callback membantu mengatur urutan eksekusi di JavaScript?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  },
  {
    "pertanyaan": "Apa hubungan callback function dengan asynchronous programming?",
    "jawaban": "Callback adalah fungsi yang dikirim sebagai argumen ke fungsi lain dan akan dijalankan setelah proses tertentu selesai.",
    "kode": "function proses(data, callback) {\n  console.log('Memproses:', data);\n  callback();\n}\nproses('Data 1', function() {\n  console.log('Selesai!');\n});"
  }
]
